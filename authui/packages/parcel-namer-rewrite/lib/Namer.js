"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _plugin = require("@parcel/plugin");

var _Config = require("./Config");

var _logger = require("@parcel/logger");

var _crypto = _interopRequireDefault(require("crypto"));

var _utils = require("@parcel/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CONFIG = Symbol.for('parcel-plugin-config'); // noinspection JSUnusedGlobalSymbols

var _default = new _plugin.Namer({
  config: _Config.Config | undefined,
  delegate: null,

  async name(opts) {
    var _opts$bundle$getMainE;

    const config = this.ensureConfig(opts.options.projectRoot, opts.options.packageManager, opts.logger);

    if (!config) {
      return null;
    }

    const disable = config.developmentDisable && opts.options.mode === 'development';
    let nameFromSuper = null;
    const asset = (_opts$bundle$getMainE = opts.bundle.getMainEntry()) !== null && _opts$bundle$getMainE !== void 0 ? _opts$bundle$getMainE : opts.bundle.getEntryAssets()[0];

    if (asset) {
      const assetPath = asset.filePath;
      nameFromSuper = assetPath.substring(assetPath.lastIndexOf("/") + 1);
      const i = nameFromSuper.lastIndexOf(".");

      if (nameFromSuper.substring(i) === ".ts") {
        nameFromSuper = nameFromSuper.substring(0, i) + ".js";
      }
    }

    if (nameFromSuper != null && !disable) {
      return this.rewrite(opts.bundle, opts.bundleGraph, opts.options, nameFromSuper, opts.logger);
    }

    return nameFromSuper;
  },

  ensureConfig(projectRoot, packageManager, logger) {
    if (!this.config) {
      const config = new _Config.Config();
      config.loadFromPackageFolder(projectRoot, logger);

      if (!config.chain) {
        throw Error('No chain namer has been found in project. Set package.json#parcel-namer-rewrite:chain to set a delegate namer ("@parcel/namer-default" by default)');
      }

      const delegatePackage = packageManager.load(config.chain, projectRoot);

      if (!delegatePackage) {
        throw Error(`'Package ${config.delegate}' is not available. Set package.json#parcel-namer-rewrite:chain to set a delegate namer ("@parcel/namer-default" by default)`);
      }

      const delegate = delegatePackage.default[CONFIG];

      if (!delegate) {
        throw Error(`Package '${config.delegate}' has been found, but it's not a namer. Set package.json#parcel-namer-rewrite:chain to set a delegate namer ("@parcel/namer-default" by default)`);
      }

      this.delegate = delegate;
      this.config = config;
    }

    return this.config;
  },

  async rewrite(bundle, bundleGraph, options, superName, logger) {
    const rule = this.config.selectRule(superName);

    if (!rule) {
      return superName;
    }

    let bundleHash = '';

    if (options.mode !== 'development' || this.config.developmentHashing) {
      if (this.config.useParcelHash) {
        bundleHash = bundle.hashReference;
      } else {
        let assets = [];
        bundle.traverseAssets(asset => assets.push(asset));

        let hash = _crypto.default.createHash('md5');

        for (let i = 0; i < assets.length; ++i) {
          const asset = assets[i];

          if (asset.filePath) {
            const fileHash = await (0, _utils.md5FromFilePath)(asset.fs, asset.filePath);
            hash.update([asset.filePath, fileHash].join(':'));
          }
        }

        bundleHash = hash.digest('hex').substr(0, 6);
      }
    } // if we need hashing - remove bundle hash placeholder


    if (bundleHash && bundle.hashReference) {
      superName = superName.replace("." + bundle.hashReference, "");
    }

    const rewrite = superName.replace(rule.test, rule.to).replace(/{(.?)hash(.?)}/, bundleHash.length > 0 ? `$1${bundleHash}$2` : '');
    if (this.config.silent !== true) logger.info({
      message: `Rewrite ${superName} -> ${rewrite}`
    });
    return rewrite;
  }

});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,